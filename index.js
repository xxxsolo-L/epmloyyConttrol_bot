require ("dotenv").config();
const {Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, DEBUG} = require('grammy')
const User = require('./controllers/user.model');
const geoData = require('./controllers/geoData.model');
const mongoose = require ('mongoose');
const mongoURI = process.env.MONGO_URI;
const { haversineDistance } = require ('./services/geoCheck');
const { saveGeoPoint } = require ('./services/geoService');
const { userCreate } = require ('./services/userCreate');
const { requestLocation } = require ('./services/requestLocation');


mongoose.connect(mongoURI)
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('Error connecting to MongoDB:', err));

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));


const bot = new Bot(process.env.BOT_API_KEY)

bot.api.setMyCommands([
    {
        command: 'start', description: '–°—Ç–∞—Ä—Ç—É–µ–º!',
    },
    // {
    //     command: 'hello', description: '–î–∞—Ä–æ–≤–∞',
    // },
])


bot.command('start', async (ctx) => {
    console.log(ctx.chat);
    console.log(ctx.chatId);

    const userId=ctx.from.id;
    console.log(userId);

    let user = await User.findOne({ user_id: userId });
    if (!user) {
        await userCreate(ctx);
        await requestLocation(ctx);
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º ${ctx.chat.first_name}!`);
        await requestLocation(ctx);
    }

    //—Å—é–¥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –ë–î

});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
bot.on('message:location', async (ctx) => {
    const location = ctx.message.location;
    console.log(ctx.message.location);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if (location) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –æ—Ç–º–µ—Ç–∫—É
        await saveGeoPoint(ctx, location);

        const center = { lat: 47.275109, lng: 29.147706 };

        const { latitude, longitude } = location;
        const point = { lat: location.latitude, lng: location.longitude };
        // –í–∞—à–∞ —Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const distance = haversineDistance(center, point)
        console.log(`–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance} –º`);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
        await ctx.reply(`–°–ø–∞—Å–∏–±–æ! ‚úç  –í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è: \nüåè–®–∏—Ä–æ—Ç–∞: ${latitude}\nüåé–î–æ–ª–≥–æ—Ç–∞: ${longitude}`);
        //–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
        await ctx.replyWithLocation(latitude, longitude);
        if (distance <= 100) {
            await delay(1000);
        await ctx.reply('–í—ã –≤ –ø—Ä–µ–¥–µ–ª–µ —Ö–∞–±–∞.');
    } else {
            await delay(1000);
            await ctx.reply(`–í—ã –Ω–µ –≤ —Ö–∞–±–µ! –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(2)} –º.`);
    }
    } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.");
    }
});



bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}`);
    const e = err.error;

    if(e instanceof GrammyError) {
        console.error("Error in request: ", e.description);
    } else if (e instanceof HttpError){
        console.error("Could not contact Telegram: ", e);
    } else {
        console.error("Unknown error: ", e);
    }
})


bot.start()